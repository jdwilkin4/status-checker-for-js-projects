import { CardLabels } from "./types";

export const USER_STORIES: string =
  "https://docs.google.com/document/d/14A41-gH6ojYigv2fLa211JkvZ1hyjQ-cjXXfHgWfdc0/edit#";

export const PROJECT_STATUS_LIST: CardLabels[] = [
  {
    title: "Learn Basic JavaScript by Building a Role Playing Game",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title: "Learn Form Validation by Building a Calorie Counter",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title:
      "Learn Basic String and Array Methods by Building a Music Playlist App",
    status: "WIP Prototype",
    color: "accentColors.purple",
    assigned: "Rafael",
  },
  {
    title: "Learn the Date Object By Building a Date Formatter",
    status: "In Review",
    color: "accentColors.red",
    assigned: "Joy",
  },
  {
    title: "Palindrome Checker",
    status: "WIP Prototype",
    color: "accentColors.purple",
    isCertification: true,
    assigned: "Estefania",
  },
  {
    title: "Learn Modern JavaScript Methods by Building Football Team Cards",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title: "Learn Debugging TODO List App",
    status: "WIP Steps",
    color: "accentColors.blue",
    assigned: "Rafael",
  },
  {
    title: "Learn Recursion by Building a Decimal to Binary Converter",
    status: "WIP Steps",
    color: "accentColors.blue",
    assigned: "Kris",
  },
  {
    title: "Roman Numeral Converter",
    status: "WIP Prototype",
    color: "accentColors.purple",
    isCertification: true,
    assigned: "Estefania",
  },
  {
    title: "Learn Basic Algorithmic Thinking by Building a Number Sorter",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title: "Learn Advanced Array Methods by Building a Statistics Calculator",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title: "Learn Functional Programming by Building a Spreadsheet",
    status: "In Review",
    color: "accentColors.red",
    assigned: "Naomi",
  },
  {
    title: "Learn Regular Expressions by Building a Spam Filter",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title: "Telephone Number Validator",
    status: "WIP Prototype",
    color: "accentColors.purple",
    isCertification: true,
    assigned: "Estefania",
  },
  {
    title:
      "Learn Data Structures Basic OOP Concepts by Building a Shopping Cart",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title: "Learn Intermediate OOP by Building a Platformer Game",
    status: "WIP Steps",
    color: "accentColors.blue",
    assigned: "Jessica",
  },
  {
    title: "Learn Intermediate Algorithmic Thinking by Building a Dice Game",
    status: "WIP Prototype",
    color: "accentColors.purple",
    assigned: "Joy",
  },
  {
    title: "Cash Register",
    status: "WIP Prototype",
    color: "accentColors.purple",
    isCertification: true,
    assigned: "Estefania",
  },
  {
    title: "Learn Fetch and Promises by Building an fCC Authors Page",
    status: "Complete",
    color: "accentColors.green",
  },
  {
    title:
      "Learn Intermediate Fetch Promises and Async Await by Building an fCC Forum Leaderboard",
    status: "In Review",
    color: "accentColors.red",
    assigned: "Joy",
  },
  {
    title: "Random Quote Machine",
    status: "WIP Prototype",
    color: "accentColors.purple",
    isCertification: true,
    assigned: "Estefania",
  },
];

export const LIST_OF_CONCEPTS_TAUGHT = [
  "array",
  "arr.concat()",
  "arr.every()",
  "arr.fill()",
  "arr.filter()",
  "arr.concat()",
  "arr.every()",
  "arr.fill()",
  "arr.filter()",
  "arr.find()",
  "arr.forEach()",
  "arr.includes()",
  "arr.indexOf()",
  "arr.join()",
  "arr.length",
  "arr.map()",
  "arr.pop()",
  "arr.push()",
  "arr.reduce()",
  "arr.reverse()",
  "arr.shift()",
  "arr.slice()",
  "arr.some()",
  "arr.sort()",
  "arr.splice()",
  "Array.from()",
  "new Array()",
  "audio.pause()",
  "audio.play()",
  "new Audio()",
  "class ClassName / new ClassName()",
  "constructor()",
  "Multi-line comments",
  "Single-line comments",
  "console.log()",
  "new Date()",
  "date.getDate()",
  "date.getMonth()",
  "date.getFullYear()",
  "date.getHours()",
  "date.getMinutes()",
  "date.getUTCHours()",
  "date.getUTCMinutes()",
  "Intl.DateTimeFormat",
  "document.createElement()",
  "document.getElementById()",
  "document.getElementsByClassName()",
  "document.querySelector()",
  "document.querySelectorAll()",
  "el.appendChild()",
  "el.children",
  "el.classList",
  "el.className",
  "el.createTextNode()",
  "el.disabled",
  "el.id",
  "el.innerHTML",
  "el.innerText",
  "el.onchange",
  "el.remove()",
  "el.removeAttribute()",
  "el.setAttribute()",
  "el.style",
  "el.textContent",
  "el.type",
  "el.value",
  "change",
  "click",
  "DOMContentLoaded",
  "el.addEventListener()",
  "event.key",
  "event.onclick",
  "event.preventDefault()",
  "event.target (value, id, etc.)",
  "keydown",
  "onsubmit (in HTML)",
  "submit",
  "Compound assignment: +=",
  "Addition: +",
  "Assignment: =",
  "Decrement: --",
  "Destructuring assignment",
  "Division: /",
  "Exponentiation: **",
  "Greater than or equal: >=",
  "Greater than: >",
  "Increment: ++",
  "Inequality: !=",
  "Less than or equal: <=",
  "Less than: <",
  "Logical AND: &&",
  "Logical NOT: !",
  "Logical OR: ||",
  "Multiplication: *",
  "null",
  "Remainder / modulo: %",
  "Spread syntax: ...",
  "Strict equality: ===",
  "Strict inequality: !==",
  "Subtraction assignment -=",
  "Subtraction: -",
  "Ternary operator",
  "this",
  "fetch()",
  "Arguments / parameters",
  "Arrow function",
  "invoke function",
  "async / await",
  "Declaring a function",
  "Default parameters",
  "return statement",
  "<script> with the `src` attribute",
  "res.json()",
  "for loop",
  "for...of loop",
  "while loop",
  "Math.ceil()",
  "Math.floor()",
  "Math.max()",
  "Math.min()",
  "Math.random()",
  "Math.sqrt()",
  "num.toFixed()",
  "num.toString()",
  "Number()",
  "Basic object usage ",
  "Multi-word properties",
  "obj.hasOwnProperty()",
  "Object.entries()",
  "Object.freeze()",
  "Object.keys()",
  "Object.values()",
  "Bracket notation",
  "Dot notation",
  "Beginning of input assertion: ^",
  "Case insensitivity flag: i",
  "Character class / set: [...]",
  "Disjunction: | (matches left or right item)",
  "End of input assertion: $",
  "Escaped characters: *, \\, etc.",
  "Global flag: g",
  "Group / capture group: (...)",
  "Match any character except line breaks: . (dot)",
  "Match any digit: d",
  "Match characters in a range: a-z, 0-9, etc.",
  "Match whitespace character: s",
  "Negative lookahead: ?!",
  "new RegExp()",
  "Non-capturing group: (?:x)",
  "Quantifier: ? (matches the preceding token 0 or 1 times)",
  "Quantifier: {n} (matches at least n occurrences of the preceding item)",
  "Quantifier: * (matches the preceding item 0 or more times)",
  "Quantifier: + (matches the preceding item 1 or more times)",
  "regex.test()",
  "new Set()",
  "Set().size",
  "isNan()",
  "parseFloat()",
  "parseInt()",
  "break",
  "if statement",
  "if...else statement",
  "switch",
  "Basic string usage (single or double quotes, backticks)",
  "Concatenation",
  "Escape sequences: , \n, etc.",
  "new String()",
  "str.charCodeAt()",
  "str.match()",
  "str.replace()",
  "str.slice()",
  "str.split()",
  "str.startsWith()",
  "str.toLowerCase()",
  "str.toUpperCase()",
  "Template literal",
  "camelCase",
  "Code lines end with a semi-colon",
  "Screaming snake case for constants",
  "const",
  "Declaring a variable without initializing it",
  "Initializing with a value (string, number, etc.)",
  "let",
  "var",
  "boolean",
  "location.reload()",
  "settimeout()",
  "alert",
  "confirm",
  "insertAdjacentHTML",
  "Math.abs()",
  "getElementsByTagName",
  "console.error",
] as const;
